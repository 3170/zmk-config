/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define HOST_OS 2
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_58keys.h"
#include "../zmk-nodefree-config/international_chars/german.dtsi"

/* layer and key shortcuts */

#define ___ &trans

#define DEF 0  // layer shortcuts, must match order in which they are defined below
#define NAV 1
#define NUM 2
#define GER 3

/* custom behaviors */

// homerow mods
ZMK_BEHAVIOR(hrm, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    global-quick-tap;
    bindings = <&kp>, <&kp>;
)

// tap: sticky shift | double tap: capsword
ZMK_BEHAVIOR(ss_cw, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&sk LSHFT>, <&caps_word>;
)

// tap: backspace | shift + tap: delete | hold: num layer
ZMK_BEHAVIOR(bs_del_num, mod_morph,
    bindings = <&lt NUM BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// windows sleep macro
ZMK_BEHAVIOR(win_sleep, macro,
    wait-ms = <100>;
    tap-ms = <5>;
    bindings = <&kp LG(X) &kp U &kp S>;
)

// euro sign
ZMK_UNICODE_SINGLE(euro_sign, N2, N0, A, C)  // €

// replace a/o/u/s with German umlauts when NAV and NUM are held jointly
ZMK_CONDITIONAL_LAYER(NAV NUM, GER)

// combos
#undef COMBO_TERM
#define COMBO_TERM 40  // timeout of 40ms (default is 30ms if omitted)
ZMK_COMBO(combo_sleep,  &win_sleep, RT3 RT4, NAV)  // custom sleep macro, only active on NAV layer
ZMK_COMBO(combo_copy,   &kp LC(C),  LB2 LB3, ALL)  // Ctrl + C, active on all layers
ZMK_COMBO(combo_paste,  &kp LC(V),  LB1 LB2, ALL)  // Ctrl + V, active on all layers

/* keymap */

ZMK_LAYER(default_layer,
//  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &kp TAB       &trans        &trans        &trans       AS(LG(Z))       &mo 1                                       &mo 2         &kp C_PP    &kp C_NEXT   &kp C_VOL_DN  &kp C_VOL_UP  &kp QUESTION
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp BACKSPACE     AS(Q)         AS(W)         AS(E)         AS(R)         AS(T)                                       AS(Z)         AS(U)         AS(I)         AS(O)          AS(P)     &kp BACKSPACE
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp LEFT_SHIFT    AS(A)         AS(S)         AS(D)         AS(F)         AS(G)                                       AS(H)         AS(J)         AS(K)         AS(L)     &kp UP_ARROW    &kp RIGHT_SHIFT
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮  ╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &kp ESC        AS(Y)         AS(X)         AS(C)         AS(V)         AS(B)       &kp ENTER        &kp ENTER      AS(N)         AS(M)        AS(COMMA)      AS(DOT)   &kp DOWN_ARROW  &kp RIGHT_ARROW
//  ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯                              ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                   &kp LCTRL    &kp LEFT_ALT   &kp LCMD      &kp SPACE                                    &kp SPACE      &kp RCMD       &trans    &kp LEFT_ARROW
//                              ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯


     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     //   &kp Q         &kp W         &kp F         &kp P         &kp B             &kp J         &kp L         &kp U         &kp Y         &kp SQT
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     //   &hrm LGUI A   &hrm LALT R   &hrm LCTRL S  &hrm LSHFT T  &kp G             &kp M         &hrm RSHFT N  &hrm LCTRL E  &hrm LALT I   &hrm LGUI O
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     //   &kp Z         &kp X         &kp C         &kp D         &kp V             &kp K         &kp H         &kp COMMA     &kp DOT       &kp SEMI
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     //                               &kp ESC       &lt NAV SPACE &kp TAB           &kp RET       &bs_del_num   &ss_cw
     //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(nav_layer,

//  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &trans        &trans        &trans        &trans        &trans        &trans                                       &trans        &trans        &trans        &trans         &trans       &trans
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &trans        &trans        &trans        &trans        &trans        &trans                                       &trans        &trans        &trans        &trans         &trans       &trans
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &trans        &trans        &trans        &trans        &trans        &trans                                       &trans        &trans        &trans        &trans         &trans       &trans
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮  ╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &trans        &trans        &trans        &trans        &trans        &trans        &trans           &trans        &trans        &trans        &trans        &trans         &trans       &trans
//  ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯                              ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                    &trans        &trans        &trans        &trans                                       &trans        &trans        &trans        &trans
//                              ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯

     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     //   ___           ___           ___           ___           ___               &kp PG_UP     &kp HOME      &kp UP        &kp END       &kp INS
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     //   &sk LGUI      &sk LALT      &sk LCTRL     &sk LSHFT     ___               &kp PG_DN     &kp LEFT      &kp DOWN      &kp RIGHT     &kp DEL
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     //   ___           ___           ___           ___           ___               ___           &kp LC(X)     &kp LC(INS)   &kp LS(INS)   ___
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     //                               ___           ___           ___               ___           ___           ___
     //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(num_layer,

//  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &trans       &trans         &trans         &trans       &trans        &trans                                    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3     &trans        &trans        &trans
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &out OUT_TOG    &trans         &trans         &trans       &trans        &trans                                    &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6     &trans        &trans        &trans
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &bt BT_CLR     &trans         &trans         &trans       &trans        &trans                                    &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9    &ett_sign    &kp PAGE_UP     &trans
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮  ╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &bt BT_NXT     &trans         &trans         &trans       &trans        &trans         &trans           &trans    &kp KP_MINUS  &kp NUMBER_0   &kp KP_PLUS     &trans      &kp PAGE_DOWN  &kp C_AC_FORWARD
//  ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯                              ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                    &trans         &trans       &trans        &trans                                       &kp LT     &kp KP_EQUAL     &kp GT     &kp C_AC_BACK
//                              ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯

     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     //   &kp ESC       &kp N7        &kp N8        &kp N9        &kp STAR          ___           ___           ___           ___           ___
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     //   &kp TAB       &kp N4        &kp N5        &kp N6        &kp PLUS          ___           &sk RSHFT     &sk LCTRL     &sk LALT      &sk LGUI
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     //   &kp RET       &kp N1        &kp N2        &kp N3        &kp FSLH          ___           ___           ___           ___           ___
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     //                               &kp DOT       &kp N0        &kp MINUS         ___           ___           ___
     //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(german_layer,

//  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &trans        &trans        &trans        &trans        &trans        &trans                                       &trans        &trans        &trans        &trans         &trans     &de_eszett
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &trans        &trans        &trans       &euro_sign     &trans        &trans                                       &trans        &de_ue        &trans        &de_oe         &trans       &trans
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &trans        &de_ae        &trans        &trans        &trans        &trans                                       &trans        &trans        &trans       &ett_sign       &trans       &trans
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮  ╭─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &trans        &trans        &trans        &trans        &trans        &trans        &trans           &trans        &trans        &trans        &trans        &trans         &trans       &trans
//  ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯                              ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                    &trans        &trans        &trans        &trans                                       &trans        &trans        &trans        &trans
//                              ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯

     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     //   ___           ___           ___           ___           ___               ___           ___           &de_ue        ___           ___
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     //   &de_ae        ___           &de_eszett    ___           ___               ___           ___           &euro_sign    ___           &de_oe
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     //   ___           ___           ___           ___           ___               ___           ___           ___           ___           ___
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     //                               ___           ___           ___               ___           ___           ___
     //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)



// #define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro


// BEHAVIORS

// / {
//    behaviors {                                         // Autoshift Macro
//        as: auto_shift {
//            compatible = "zmk,behavior-hold-tap";
//            label = "AUTO_SHIFT";
//            #binding-cells = <2>;
//            tapping_term_ms = <150>;
//            quick_tap_ms = <0>;
//            flavor = "tap-preferred";
//            bindings = <&kp>, <&kp>;
//        };
// };
  
// MACROS

// to call a simple UNDO Macro use:     &kp LG(Z)
// to call a autoshift UNDO Macro use:  AS(LG(Z))
  
// to call a macro like this use:       &undo
// macros {
//        undo: macro_name {
//        label = "undo";
//        compatible = "zmk,behavior-macro";
//        #binding-cells = <0>;
//        bindings
//                = <&macro_press &kp LCMD>
//                , <&macro_tap &kp Z>
//                , <&macro_release &kp LCMD>
//                ;
//     };
// };

